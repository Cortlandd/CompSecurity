// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.soundcloud.android.storage;


// Referenced classes of package com.soundcloud.android.storage:
//            Table

final class DatabaseSchema
{

    static final String DATABASE_CREATE_ACTIVITIES = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,uuid VARCHAR(255),user_id INTEGER,sound_id INTEGER,sound_type INTEGER,comment_id INTEGER,type String,tags VARCHAR(255),created_at INTEGER,content_id INTEGER,sharing_note_text VARCHAR(255),sharing_note_created_at INTEGER,UNIQUE (created_at, type, content_id, sound_id, user_id));";
    static final String DATABASE_CREATE_ACTIVITY_VIEW = "AS SELECT Activities._id as _id,Activities.uuid as uuid,Activities.type as type,Activities.tags as tags,Activities.created_at as created_at,Activities.comment_id as comment_id,Activities.sound_id as sound_id,Activities.sound_type as sound_type,Activities.user_id as user_id,Activities.content_id as content_id,Activities.sharing_note_text as sharing_note_text,Activities.sharing_note_created_at as sharing_note_created_at,Users.username as activity_user_username,Users.permalink as activity_user_permalink,Users.avatar_url as activity_user_avatar_url,SoundView.*,Comments.body as comment_body,Comments.created_at as comment_created_at,Comments.timestamp as comment_timestamp FROM Activities LEFT JOIN Users ON(   Activities.user_id = Users._id) LEFT JOIN SoundView ON(   Activities.sound_id = SoundView._id AND    Activities.sound_type = SoundView._type) LEFT JOIN Comments ON(   Activities.comment_id = Comments._id) LEFT JOIN Activities track_dup ON(   track_dup.sound_id = Activities.sound_id AND    track_dup.type = 'track-sharing' AND Activities.type = 'track') LEFT JOIN Activities set_dup ON(   set_dup.sound_id = Activities.sound_id AND    set_dup.type = 'playlist-sharing' AND Activities.type = 'playlist') WHERE track_dup._id IS NULL AND set_dup._id IS NULL ORDER BY created_at DESC";
    static final String DATABASE_CREATE_COLLECTIONS = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,uri VARCHAR(255),last_addition INTEGER, last_sync INTEGER, last_sync_attempt INTEGER, size INTEGER, sync_state INTEGER, extra VARCHAR(255), UNIQUE (uri));";
    static final String DATABASE_CREATE_COLLECTION_ITEMS = "(user_id INTEGER, item_id INTEGER,collection_type INTEGER, resource_type INTEGER DEFAULT 0, position INTEGER, created_at INTEGER, PRIMARY KEY(user_id, item_id, collection_type, resource_type) ON CONFLICT REPLACE);";
    static final String DATABASE_CREATE_COLLECTION_PAGES = "(collection_id INTEGER,page_index INTEGER,etag VARCHAR(255), size INTEGER, PRIMARY KEY(collection_id, page_index) ON CONFLICT REPLACE);";
    static final String DATABASE_CREATE_COMMENTS = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,urn TEXT UNIQUE,user_id INTEGER,track_id INTEGER,timestamp INTEGER,created_at INTEGER,body VARCHAR(255));";
    static final String DATABASE_CREATE_LIKES = "(_id INTEGER NOT NULL,_type INTEGER NOT NULL,created_at INTEGER NOT NULL,added_at INTEGER DEFAULT NULL,removed_at INTEGER DEFAULT NULL,PRIMARY KEY (_id, _type),FOREIGN KEY(_id, _type) REFERENCES Sounds(_id, _type));";
    static final String DATABASE_CREATE_PLAYLIST_TRACKS = "(playlist_id INTEGER, track_id INTEGER,position INTEGER,added_at INTEGER,removed_at INTEGER,PRIMARY KEY (track_id, position, playlist_id) ON CONFLICT IGNORE);";
    static final String DATABASE_CREATE_PLAYLIST_TRACKS_VIEW = "AS SELECT PlaylistTracks.playlist_id as playlist_id, PlaylistTracks.position as playlist_position, PlaylistTracks.added_at as playlist_added_at, SoundView.* FROM PlaylistTracks INNER JOIN SoundView ON(  PlaylistTracks.track_id = SoundView._id AND SoundView._type = 0)";
    static final String DATABASE_CREATE_POSTS = "(type STRING NOT NULL,target_id INTEGER NOT NULL,target_type INTEGER NOT NULL,created_at INTEGER NOT NULL,added_at INTEGER DEFAULT NULL,removed_at INTEGER DEFAULT NULL,PRIMARY KEY (type, target_id, target_type),FOREIGN KEY(target_id, target_type) REFERENCES Sounds(_id, _type));";
    static final String DATABASE_CREATE_PROMOTED_TRACKS = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,created_at INTEGER,ad_urn TEXT, promoter_id INTEGER,promoter_name TEXT,tracking_track_clicked_urls TEXT,tracking_profile_clicked_urls TEXT,tracking_promoter_clicked_urls TEXT,tracking_track_played_urls TEXT,tracking_track_impression_urls TEXT);";
    static final String DATABASE_CREATE_RECORDINGS = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER,timestamp INTEGER,longitude VARCHAR(255),latitude VARCHAR(255),what_text VARCHAR(255),where_text VARCHAR(255),audio_path VARCHAR(255),artwork_path VARCHAR(255),duration INTEGER,description VARCHAR(255),four_square_venue_id VARCHAR(255), shared_emails text,shared_ids text, private_user_id INTEGER,tip_key VARCHAR(255),service_ids VARCHAR(255),is_private BOOLEAN,external_upload BOOLEAN,upload_status INTEGER DEFAULT 0,trim_left INTEGER,trim_right INTEGER,filters INTEGER,optimize INTEGER,fading INTEGER);";
    static final String DATABASE_CREATE_SEARCHES = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,created_at INTEGER,user_id INTEGER,query VARCHAR(255),search_type INTEGER,UNIQUE (user_id, search_type, query) ON CONFLICT REPLACE);";
    static final String DATABASE_CREATE_SOUNDS = "(_id INTEGER,_type INTEGER,last_updated INTEGER,permalink VARCHAR(255),original_content_size INTEGER,duration INTEGER,state VARCHAR(50),created_at INTEGER,genre VARCHAR(100),tag_list VARCHAR(500),track_type VARCHAR(255),title VARCHAR(255),permalink_url VARCHAR(255),artwork_url VARCHAR(255), waveform_url VARCHAR(255), downloadable BOOLEAN, commentable BOOLEAN, download_url VARCHAR(255), stream_url VARCHAR(255),streamable BOOLEAN DEFAULT 0, sharing VARCHAR(255),license VARCHAR(100),purchase_url VARCHAR(255),playback_count INTEGER DEFAULT -1,download_count INTEGER DEFAULT -1,comment_count INTEGER DEFAULT -1,favoritings_count INTEGER DEFAULT -1,reposts_count INTEGER DEFAULT -1,shared_to_count INTEGER DEFAULT -1,sharing_note_text VARCHAR(255),tracks_uri VARCHAR(255),track_count INTEGER DEFAULT -1,playlist_type VARCHAR(255),user_id INTEGER,DESCRIPTION TEXT,PRIMARY KEY (_id, _type) ON CONFLICT IGNORE);";
    static final String DATABASE_CREATE_SOUNDSTREAM = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,sound_id INTEGER, sound_type INTEGER,reposter_id INTEGER,promoted_id INTEGER,created_at INTEGER,FOREIGN KEY(sound_id) REFERENCES Sounds(_id) );";
    static final String DATABASE_CREATE_SOUNDSTREAM_VIEW = "AS SELECT SoundStream._id as _id,SoundStream.created_at as created_at,SoundStream.sound_id as sound_id,SoundStream.sound_type as sound_type,SoundStream.reposter_id as reposter_id,SoundStream.promoted_id as promoted_id,Users.username as reposter_username,Users.permalink as reposter_permalink,Users.avatar_url as reposter_avatar_url,SoundView.* FROM SoundStream INNER JOIN ( SELECT _id, MAX(created_at) FROM SoundStream GROUP BY sound_id, sound_type, promoted_id ) dupes ON SoundStream._id = dupes._id  LEFT JOIN Users ON(   SoundStream.reposter_id = Users._id) LEFT JOIN SoundView ON(   SoundStream.sound_id = SoundView._id AND    SoundStream.sound_type = SoundView._type) ORDER BY SoundStream.created_at DESC";
    static final String DATABASE_CREATE_SOUND_ASSOCIATION_VIEW;
    static final String DATABASE_CREATE_SOUND_VIEW;
    static final String DATABASE_CREATE_SUGGESTIONS = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,id  INTEGER,kind VARCHAR(32) NOT NULL,text VARCHAR(255) COLLATE NOCASE,icon_url       VARCHAR(255),permalink_url  VARCHAR(255),suggest_text_1 VARCHAR(255) NOT NULL,suggest_text_2 VARCHAR(255),suggest_icon_1 VARCHAR(255),suggest_intent_data VARCHAR(255),UNIQUE(id, kind) ON CONFLICT REPLACE)";
    static final String DATABASE_CREATE_TRACK_METADATA = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER, play_count INTEGER DEFAULT 0,cached INTEGER DEFAULT 0,type INTEGER DEFAULT 0,etag VARCHAR(34),url_hash VARCHAR(32),size INTEGER,bitrate INTEGER,UNIQUE (_id, user_id) ON CONFLICT IGNORE);";
    static final String DATABASE_CREATE_TRACK_POLICIES = "(track_id INTEGER, monetizable BOOLEAN DEFAULT 0,syncable BOOLEAN DEFAULT 1,sub_mid_tier BOOLEAN DEFAULT 0,sub_high_tier BOOLEAN DEFAULT 0,policy TEXT,monetization_model TEXT,last_updated INTEGER, PRIMARY KEY (track_id) ON CONFLICT REPLACE );";
    static final String DATABASE_CREATE_USERS = "(_id INTEGER PRIMARY KEY AUTOINCREMENT,_type INTEGER DEFAULT 0,username VARCHAR(255),avatar_url VARCHAR(255),permalink VARCHAR(255),permalink_url VARCHAR(255),full_name VARCHAR(255),description text,city VARCHAR(255),country VARCHAR(255),plan VARCHAR(16),primary_email_confirmed INTEGER,website VARCHAR(255),website_title VARCHAR(255), discogs_name VARCHAR(255),myspace_name VARCHAR(255),track_count INTEGER DEFAULT -1,followers_count INTEGER DEFAULT -1,followings_count INTEGER DEFAULT -1,public_favorites_count INTEGER DEFAULT -1,private_tracks_count INTEGER DEFAULT -1,last_updated INTEGER);";
    static final String DATABASE_CREATE_USER_ASSOCIATIONS = "(owner_id INTEGER, target_id INTEGER,association_type INTEGER, resource_type INTEGER DEFAULT 0, position INTEGER, created_at INTEGER, added_at INTEGER, removed_at INTEGER, token VARCHAR(150), PRIMARY KEY(owner_id, target_id, association_type, resource_type) ON CONFLICT REPLACE);";
    static final String DATABASE_CREATE_USER_ASSOCIATION_VIEW;
    static final String DATABASE_CREATE_WAVEFORMS = "(track_id INTEGER, max_amplitude INTEGER, samples TEXT, created_at INTEGER,PRIMARY KEY (track_id) ON CONFLICT REPLACE );";

    DatabaseSchema()
    {
    }

    static 
    {
        DATABASE_CREATE_SOUND_VIEW = (new StringBuilder("AS SELECT Sounds._id as _id,Sounds._type as _type,Sounds.last_updated as last_updated,Sounds.permalink as permalink,Sounds.created_at as created_at,Sounds.duration as duration,Sounds.original_content_size as original_content_size,Sounds.state as state,Sounds.genre as genre,Sounds.tag_list as tag_list,Sounds.track_type as track_type,Sounds.title as title,Sounds.permalink_url as permalink_url,Sounds.artwork_url as artwork_url,Sounds.waveform_url as waveform_url,Sounds.downloadable as downloadable,Sounds.download_url as download_url,Sounds.stream_url as stream_url,Sounds.streamable as streamable,Sounds.commentable as commentable,Sounds.sharing as sharing,Sounds.license as license,Sounds.purchase_url as purchase_url,Sounds.playback_count as playback_count,Sounds.download_count as download_count,Sounds.comment_count as comment_count,Sounds.favoritings_count as favoritings_count,Sounds.reposts_count as reposts_count,Sounds.shared_to_count as shared_to_count,Sounds.tracks_uri as tracks_uri,Sounds.track_count as track_count,Sounds.description as description,TrackPolicies.monetizable as sound_policies_monetizable,TrackPolicies.policy as sound_policies_policy,TrackPolicies.syncable as sound_policies_syncable,TrackPolicies.sub_mid_tier as sound_policies_sub_mid_tier,TrackPolicies.sub_high_tier as sound_policies_sub_high_tier,TrackPolicies.monetization_model as sound_policies_monetization_model,Users._id as sound_user_id,Users.username as sound_user_username,Users.permalink as sound_user_permalink,Users.avatar_url as sound_user_avatar_url,")).append(Tables.TrackDownloads.DOWNLOADED_AT).append(" as sound_offline_downloaded_at,").append(Tables.TrackDownloads.REMOVED_AT).append(" as sound_offline_removed_at,COALESCE(TrackMetadata.play_count, 0) as sound_user_play_count,COALESCE(TrackMetadata.cached, 0) as sound_cached,COALESCE(TrackMetadata.type, 0) as _type FROM Sounds LEFT JOIN Users ON(   Sounds.user_id = Users._id) LEFT OUTER JOIN TrackDownloads    ON (Sounds._id = ").append(Tables.TrackDownloads._ID).append(" AND    Sounds._type = 0) LEFT OUTER JOIN TrackPolicies ON(   Sounds._id = TrackPolicies.track_id) LEFT OUTER JOIN TrackMetadata ON(   TrackMetadata._id = Sounds._id)").toString();
        DATABASE_CREATE_SOUND_ASSOCIATION_VIEW = (new StringBuilder("AS SELECT CollectionItems.created_at as association_timestamp, CollectionItems.collection_type as association_type, CollectionItems.user_id as association_owner_id, SoundView.* FROM ")).append(Table.CollectionItems.name()).append("  INNER JOIN SoundView ON(   ").append(Table.CollectionItems.name()).append(".item_id = SoundView._id AND ").append(Table.CollectionItems.name()).append(".resource_type = SoundView._type) ORDER BY association_timestamp DESC").toString();
        DATABASE_CREATE_USER_ASSOCIATION_VIEW = (new StringBuilder(" AS SELECT UserAssociations.created_at as association_timestamp, UserAssociations.association_type as association_type, UserAssociations.position as user_association_position, UserAssociations.added_at as user_association_added_at, UserAssociations.removed_at as user_association_removed_at, UserAssociations.owner_id as association_owner_id, UserAssociations.token as user_association_token, Users.* FROM ")).append(Table.UserAssociations.name()).append("  LEFT JOIN Users ON(   ").append(Table.UserAssociations.name()).append(".target_id = ").append(Table.Users.name()).append("._id) ORDER BY position ASC").toString();
    }
}
