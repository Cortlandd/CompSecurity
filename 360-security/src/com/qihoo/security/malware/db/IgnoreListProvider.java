// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.qihoo.security.malware.db;

import android.content.ContentProvider;
import android.content.ContentProviderResult;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.OperationApplicationException;
import android.content.UriMatcher;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.text.TextUtils;
import com.qihoo360.common.utils.PermissionUtil;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

// Referenced classes of package com.qihoo.security.malware.db:
//            b, d

public class IgnoreListProvider extends ContentProvider
{

    private static final UriMatcher a;
    private static HashMap d;
    private b b;
    private PackageManager c;

    public IgnoreListProvider()
    {
    }

    private Uri a(ContentValues contentvalues)
    {
        SQLiteDatabase sqlitedatabase;
        long l;
        if (contentvalues != null)
        {
            contentvalues = new ContentValues(contentvalues);
        } else
        {
            contentvalues = new ContentValues();
        }
        if (!contentvalues.containsKey("f_d"))
        {
            contentvalues.put("f_d", Long.valueOf(System.currentTimeMillis()));
        }
        sqlitedatabase = b.getWritableDatabase();
        try
        {
            l = sqlitedatabase.insert("t_ignorelist", null, contentvalues);
        }
        // Misplaced declaration of an exception variable
        catch (ContentValues contentvalues)
        {
            return null;
        }
        if (l > 0L)
        {
            contentvalues = ContentUris.withAppendedId(d.a, l);
            getContext().getContentResolver().notifyChange(contentvalues, null);
            return contentvalues;
        } else
        {
            return null;
        }
    }

    public ContentProviderResult[] applyBatch(ArrayList arraylist)
        throws OperationApplicationException
    {
        SQLiteDatabase sqlitedatabase;
        sqlitedatabase = b.getWritableDatabase();
        sqlitedatabase.beginTransaction();
        arraylist = super.applyBatch(arraylist);
        sqlitedatabase.setTransactionSuccessful();
        sqlitedatabase.endTransaction();
        return arraylist;
        arraylist;
        sqlitedatabase.endTransaction();
        throw arraylist;
    }

    public int delete(Uri uri, String s, String as[])
    {
        SQLiteDatabase sqlitedatabase = b.getWritableDatabase();
        a.match(uri);
        JVM INSTR tableswitch 1 2: default 209
    //                   1 67
    //                   2 106;
           goto _L1 _L2 _L3
_L1:
        throw new IllegalArgumentException((new StringBuilder()).append("Unknown URI ").append(uri).toString());
_L2:
        int i;
        PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
        i = sqlitedatabase.delete("t_ignorelist", s, as);
_L5:
        try
        {
            getContext().getContentResolver().notifyChange(uri, null);
        }
        // Misplaced declaration of an exception variable
        catch (Uri uri)
        {
            return i;
        }
        return i;
_L3:
        Object obj;
        PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
        obj = (String)uri.getPathSegments().get(1);
        obj = (new StringBuilder()).append("_id=").append(((String) (obj)));
        if (TextUtils.isEmpty(s))
        {
            break; /* Loop/switch isn't completed */
        }
        s = (new StringBuilder()).append(" AND (").append(s).append(')').toString();
_L6:
        i = sqlitedatabase.delete("t_ignorelist", ((StringBuilder) (obj)).append(s).toString(), as);
        if (true) goto _L5; else goto _L4
_L4:
        s = "";
          goto _L6
        if (true) goto _L5; else goto _L7
_L7:
        uri;
        return 0;
    }

    public String getType(Uri uri)
    {
        switch (a.match(uri))
        {
        default:
            throw new IllegalArgumentException((new StringBuilder()).append("Unknown URI ").append(uri).toString());

        case 1: // '\001'
            return "vnd.android.cursor.dir/vnd.qihoo.malware.t_ignorelist";

        case 2: // '\002'
            return "vnd.android.cursor.item/vnd.qihoo.malware.s_result.t_ignorelistitem";
        }
    }

    public Uri insert(Uri uri, ContentValues contentvalues)
    {
        switch (a.match(uri))
        {
        default:
            return null;

        case 1: // '\001'
            break;
        }
        try
        {
            PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
            uri = a(contentvalues);
        }
        // Misplaced declaration of an exception variable
        catch (Uri uri)
        {
            return null;
        }
        return uri;
    }

    public boolean onCreate()
    {
        b = new b(getContext());
        c = getContext().getPackageManager();
        return true;
    }

    public Cursor query(Uri uri, String as[], String s, String as1[], String s1)
    {
        SQLiteQueryBuilder sqlitequerybuilder;
        sqlitequerybuilder = new SQLiteQueryBuilder();
        switch (a.match(uri))
        {
        default:
            throw new IllegalArgumentException((new StringBuilder()).append("Unknown URI ").append(uri).toString());

        case 2: // '\002'
            break MISSING_BLOCK_LABEL_132;

        case 1: // '\001'
            PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
            sqlitequerybuilder.setTables("t_ignorelist");
            sqlitequerybuilder.setProjectionMap(d);
            break;
        }
_L1:
        SQLiteDatabase sqlitedatabase;
        try
        {
            sqlitedatabase = b.getReadableDatabase();
        }
        // Misplaced declaration of an exception variable
        catch (Uri uri)
        {
            return null;
        }
        try
        {
            as = sqlitequerybuilder.query(sqlitedatabase, as, s, as1, null, null, s1);
        }
        // Misplaced declaration of an exception variable
        catch (Uri uri)
        {
            return null;
        }
        as.setNotificationUri(getContext().getContentResolver(), uri);
        return as;
        PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
        sqlitequerybuilder.setTables("t_ignorelist");
        sqlitequerybuilder.setProjectionMap(d);
        sqlitequerybuilder.appendWhere((new StringBuilder()).append("_id=").append((String)uri.getPathSegments().get(1)).toString());
          goto _L1
    }

    public int update(Uri uri, ContentValues contentvalues, String s, String as[])
    {
        SQLiteDatabase sqlitedatabase = b.getWritableDatabase();
        a.match(uri);
        JVM INSTR tableswitch 1 2: default 213
    //                   1 67
    //                   2 108;
           goto _L1 _L2 _L3
_L1:
        throw new IllegalArgumentException((new StringBuilder()).append("Unknown URI ").append(uri).toString());
_L2:
        int i;
        PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
        i = sqlitedatabase.update("t_ignorelist", contentvalues, s, as);
_L5:
        try
        {
            getContext().getContentResolver().notifyChange(uri, null);
        }
        // Misplaced declaration of an exception variable
        catch (Uri uri)
        {
            return i;
        }
        return i;
_L3:
        Object obj;
        PermissionUtil.ensureCallerPermissionBySignature("ILP", c);
        obj = (String)uri.getPathSegments().get(1);
        obj = (new StringBuilder()).append("_id=").append(((String) (obj)));
        if (TextUtils.isEmpty(s))
        {
            break; /* Loop/switch isn't completed */
        }
        s = (new StringBuilder()).append(" AND (").append(s).append(')').toString();
_L6:
        i = sqlitedatabase.update("t_ignorelist", contentvalues, ((StringBuilder) (obj)).append(s).toString(), as);
        if (true) goto _L5; else goto _L4
_L4:
        s = "";
          goto _L6
        if (true) goto _L5; else goto _L7
_L7:
        uri;
        return 0;
    }

    static 
    {
        a = new UriMatcher(-1);
        a.addURI("com.qihoo.security.lite.provider.ignorelist", "t_ignorelist", 1);
        a.addURI("com.qihoo.security.lite.provider.ignorelist", "t_ignorelist/#", 2);
        d = new HashMap();
        d.put("_id", "_id");
        d.put("p_n", "p_n");
        d.put("r_c", "r_c");
        d.put("be", "be");
        d.put("m_r", "m_r");
        d.put("i_s", "i_s");
        d.put("i_i", "i_i");
        d.put("f_p", "f_p");
        d.put("i_m", "i_m");
        d.put("f_d", "f_d");
        d.put("a_s", "a_s");
        d.put("a_l", "a_l");
        d.put("t_n", "t_n");
        d.put("i_i_m_l", "i_i_m_l");
    }
}
