// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.qihoo.security.malware.db;

import android.content.ContentProviderOperation;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import com.qihoo.security.malware.vo.MaliciousInfo;
import com.qihoo360.common.utils.Utils;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

// Referenced classes of package com.qihoo.security.malware.db:
//            d

public class c
{

    public static List a(Context context)
    {
        return a(context, ((String) (null)), ((String []) (null)));
    }

    public static List a(Context context, String s, String as[])
    {
        Object obj;
        ArrayList arraylist;
        arraylist = new ArrayList();
        obj = null;
        context = context.getContentResolver().query(d.a, new String[] {
            "_id", "p_n", "r_c", "be", "m_r", "i_s", "i_i", "f_p", "i_m", "f_d", 
            "a_s", "a_l", "t_n", "i_i_m_l"
        }, s, as, "time DESC");
        if (context == null) goto _L2; else goto _L1
_L1:
        if (context.getCount() <= 0) goto _L2; else goto _L3
_L3:
        if (!context.moveToNext()) goto _L2; else goto _L4
_L4:
        s = new MaliciousInfo();
        s._id = context.getInt(context.getColumnIndexOrThrow("_id"));
        s.packageName = context.getString(context.getColumnIndexOrThrow("p_n"));
        s.riskClass = context.getInt(context.getColumnIndexOrThrow("r_c"));
        s.behavior = context.getInt(context.getColumnIndexOrThrow("be"));
        s.maliceRank = context.getInt(context.getColumnIndexOrThrow("m_r"));
        boolean flag;
        if (context.getInt(context.getColumnIndexOrThrow("i_s")) == 1)
        {
            flag = true;
        } else
        {
            flag = false;
        }
        s.isSystem = flag;
        if (context.getInt(context.getColumnIndexOrThrow("i_i")) == 1)
        {
            flag = true;
        } else
        {
            flag = false;
        }
        s.isInstalled = flag;
        s.filePath = context.getString(context.getColumnIndexOrThrow("f_p"));
        if (context.getInt(context.getColumnIndexOrThrow("i_m")) == 1)
        {
            flag = true;
        } else
        {
            flag = false;
        }
        s.isMonitor = flag;
        s.appSource = context.getInt(context.getColumnIndexOrThrow("a_s"));
        s.setLabel(context.getString(context.getColumnIndexOrThrow("a_l")));
        s.trojanName = context.getString(context.getColumnIndexOrThrow("t_n"));
        if (context.getInt(context.getColumnIndexOrThrow("i_i_m_l")) == 1)
        {
            flag = true;
        } else
        {
            flag = false;
        }
        s.isInMonitorList = flag;
        arraylist.add(s);
          goto _L3
        s;
_L8:
        Utils.closeCursor(context);
        return arraylist;
_L2:
        Utils.closeCursor(context);
        return arraylist;
        s;
        context = obj;
_L6:
        Utils.closeCursor(context);
        throw s;
        s;
        if (true) goto _L6; else goto _L5
_L5:
        context;
        context = null;
        if (true) goto _L8; else goto _L7
_L7:
    }

    public static final void a(Context context, int i)
    {
        b(context, "_id=?", new String[] {
            String.valueOf(i)
        });
    }

    public static final void a(Context context, String s)
    {
        b(context, "p_n=?", new String[] {
            String.valueOf(s)
        });
    }

    public static final void a(Context context, List list)
    {
        a(context, list, false);
    }

    public static final void a(Context context, List list, boolean flag)
    {
        ArrayList arraylist = new ArrayList();
        list = list.iterator();
        while (list.hasNext()) 
        {
            MaliciousInfo maliciousinfo = (MaliciousInfo)list.next();
            ContentValues contentvalues = new ContentValues();
            contentvalues.put("p_n", maliciousinfo.packageName);
            contentvalues.put("r_c", Integer.valueOf(maliciousinfo.riskClass));
            contentvalues.put("be", Integer.valueOf(maliciousinfo.behavior));
            contentvalues.put("m_r", Integer.valueOf(maliciousinfo.maliceRank));
            int i;
            if (maliciousinfo.isSystem)
            {
                i = 1;
            } else
            {
                i = 0;
            }
            contentvalues.put("i_s", Integer.valueOf(i));
            if (maliciousinfo.isInstalled)
            {
                i = 1;
            } else
            {
                i = 0;
            }
            contentvalues.put("i_i", Integer.valueOf(i));
            contentvalues.put("f_p", maliciousinfo.filePath);
            if (maliciousinfo.isMonitor)
            {
                i = 1;
            } else
            {
                i = 0;
            }
            contentvalues.put("i_m", Integer.valueOf(i));
            contentvalues.put("a_s", Integer.valueOf(maliciousinfo.appSource));
            contentvalues.put("a_l", maliciousinfo.getLabel(context));
            contentvalues.put("t_n", maliciousinfo.trojanName);
            contentvalues.put("time", Long.valueOf(System.currentTimeMillis()));
            if (flag)
            {
                i = 1;
            } else
            {
                i = 0;
            }
            contentvalues.put("i_i_m_l", Integer.valueOf(i));
            arraylist.add(ContentProviderOperation.newInsert(d.a).withValues(contentvalues).build());
        }
        try
        {
            context.getContentResolver().applyBatch("com.qihoo.security.lite.provider.ignorelist", arraylist);
            return;
        }
        // Misplaced declaration of an exception variable
        catch (Context context)
        {
            return;
        }
    }

    public static boolean a(Context context, MaliciousInfo maliciousinfo)
    {
        Object obj;
        if (!maliciousinfo.isInstalled)
        {
            return false;
        }
        obj = null;
        context = context.getContentResolver();
        android.net.Uri uri = d.a;
        maliciousinfo = maliciousinfo.packageName;
        context = context.query(uri, new String[] {
            "_id"
        }, "p_n =? ", new String[] {
            maliciousinfo
        }, "time DESC");
        if (context == null) goto _L2; else goto _L1
_L1:
        int i = context.getCount();
        if (i <= 0) goto _L2; else goto _L3
_L3:
        boolean flag = true;
_L10:
        boolean flag1;
        flag1 = flag;
        if (context != null)
        {
            context.close();
            flag1 = flag;
        }
_L5:
        return flag1;
        context;
        context = null;
_L8:
        Exception exception;
        if (context != null)
        {
            context.close();
            flag1 = false;
        } else
        {
            flag1 = false;
        }
        if (true) goto _L5; else goto _L4
_L4:
        context;
        maliciousinfo = obj;
_L7:
        if (maliciousinfo != null)
        {
            maliciousinfo.close();
        }
        throw context;
        exception;
        maliciousinfo = context;
        context = exception;
        if (true) goto _L7; else goto _L6
_L6:
        maliciousinfo;
          goto _L8
_L2:
        flag = false;
        if (true) goto _L10; else goto _L9
_L9:
    }

    private static final void b(Context context, String s, String as[])
    {
        try
        {
            context.getContentResolver().delete(d.a, s, as);
            return;
        }
        // Misplaced declaration of an exception variable
        catch (Context context)
        {
            return;
        }
    }
}
