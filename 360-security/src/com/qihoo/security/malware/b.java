// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.qihoo.security.malware;

import android.content.Context;
import android.content.res.Resources;
import com.qihoo.security.SecurityApplication;
import com.qihoo.security.locale.d;
import com.qihoo360.common.utils.FileUtil;
import com.qihoo360.mobilesafe.share.SharedPref;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

// Referenced classes of package com.qihoo.security.malware:
//            c

public class b
{

    public static String a(Context context, int i)
    {
        context = com.qihoo.security.locale.d.a();
        switch (i)
        {
        default:
            return context.a(0x7f0c00ef);

        case -1: 
            return context.a(0x7f0c00ef);

        case 0: // '\0'
            return context.a(0x7f0c00f0);

        case 4: // '\004'
            return context.a(0x7f0c00f3);

        case 2: // '\002'
            return context.a(0x7f0c00f1);

        case 3: // '\003'
            return context.a(0x7f0c00f2);

        case 1: // '\001'
            return context.a(0x7f0c00f4);
        }
    }

    public static String a(Context context, int i, String s)
    {
        d d1 = com.qihoo.security.locale.d.a();
        context = d1.a(0x7f0c013e);
        String as[] = d1.b(0x7f0e0001);
        StringBuffer stringbuffer = new StringBuffer();
        Object obj = new ArrayList();
        for (int j = 0; j < as.length; j++)
        {
            if ((1 << j & i) != 0 && j != 18)
            {
                ((ArrayList) (obj)).add(Integer.valueOf(j));
            }
        }

        if (((ArrayList) (obj)).size() > 0)
        {
            Collections.sort(((java.util.List) (obj)), new c());
            for (obj = ((ArrayList) (obj)).iterator(); ((Iterator) (obj)).hasNext(); stringbuffer.append(s))
            {
                stringbuffer.append(as[((Integer)((Iterator) (obj)).next()).intValue()]);
            }

        }
        if (stringbuffer.length() == 0)
        {
            return context;
        } else
        {
            stringbuffer.deleteCharAt(stringbuffer.length() - 1);
            return stringbuffer.toString();
        }
    }

    public static void a(Context context)
    {
        com/qihoo/security/malware/b;
        JVM INSTR monitorenter ;
        if (SharedPref.b(SecurityApplication.a(), "antivirus_update_22", false))
        {
            break MISSING_BLOCK_LABEL_52;
        }
        SharedPref.a(SecurityApplication.a(), "antivirus_update_22", true);
        try
        {
            FileUtil.deleteFile((new StringBuilder()).append(context.getFilesDir().getAbsolutePath()).append("/cloud.cache").toString());
        }
        // Misplaced declaration of an exception variable
        catch (Context context) { }
        com/qihoo/security/malware/b;
        JVM INSTR monitorexit ;
        return;
        context;
        throw context;
    }

    public static int b(Context context, int i)
    {
        int j = context.getResources().getColor(0x7f080052);
        switch (i)
        {
        default:
            return j;

        case 0: // '\0'
            return context.getResources().getColor(0x7f080056);

        case 4: // '\004'
            return context.getResources().getColor(0x7f080057);

        case 2: // '\002'
            return context.getResources().getColor(0x7f080057);

        case 3: // '\003'
            return context.getResources().getColor(0x7f080058);

        case 1: // '\001'
            return context.getResources().getColor(0x7f080058);
        }
    }

    public static String c(Context context, int i)
    {
        return a(context, i, "\n");
    }

    public static String d(Context context, int i)
    {
        d d1 = com.qihoo.security.locale.d.a();
        context = d1.a(0x7f0c013f);
        String as[] = d1.b(0x7f0e0002);
        String as1[] = d1.b(0x7f0e0008);
        int k = as1.length + 1;
        int i1 = -1;
        for (int j = 0; j < as.length;)
        {
            int j1 = i1;
            int l = k;
            if ((1 << j & i) != 0)
            {
                j1 = i1;
                l = k;
                if (j != 18)
                {
                    int k1 = Integer.valueOf(as1[j]).intValue();
                    j1 = i1;
                    l = k;
                    if (k1 < k)
                    {
                        j1 = j;
                        l = k1;
                    }
                }
            }
            j++;
            i1 = j1;
            k = l;
        }

        if (k <= as1.length && i1 >= 0)
        {
            return as[i1];
        } else
        {
            return context;
        }
    }
}
