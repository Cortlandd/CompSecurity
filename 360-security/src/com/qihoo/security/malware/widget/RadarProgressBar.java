// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.qihoo.security.malware.widget;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;
import android.util.AttributeSet;
import android.view.View;
import android.view.animation.LinearInterpolator;
import android.widget.Scroller;
import com.qihoo360.mobilesafe.b.r;

public class RadarProgressBar extends View
    implements com.qihoo.security.ui.b.b.b
{
    public static interface a
    {

        public abstract void a();

        public abstract void a(float f1);
    }


    private RectF a;
    private int b;
    private int c;
    private Paint d;
    private Paint e;
    private float f;
    private Scroller g;
    private int h;
    private Context i;
    private int j;
    private boolean k;
    private a l;

    public RadarProgressBar(Context context)
    {
        this(context, null);
    }

    public RadarProgressBar(Context context, AttributeSet attributeset)
    {
        this(context, attributeset, 0);
    }

    public RadarProgressBar(Context context, AttributeSet attributeset, int i1)
    {
        super(context, attributeset, i1);
        g = null;
        k = false;
        l = null;
        i = context;
        c();
    }

    private void c()
    {
        g = new Scroller(getContext(), new LinearInterpolator());
        h = (int)getResources().getDimension(0x7f090053);
        d = new Paint();
        d.setColor(i.getResources().getColor(0x7f080056));
        d.setStrokeCap(android.graphics.Paint.Cap.ROUND);
        d.setStyle(android.graphics.Paint.Style.STROKE);
        d.setStrokeWidth(2.0F);
        d.setAntiAlias(true);
        e = new Paint();
        e.setColor(0xffa9a9a9);
        e.setStrokeCap(android.graphics.Paint.Cap.ROUND);
        e.setStyle(android.graphics.Paint.Style.STROKE);
        e.setStrokeWidth(2.0F);
        e.setAntiAlias(true);
    }

    private void setProgress(float f1)
    {
        f = f1;
        if (l != null)
        {
            l.a(f1);
        }
        postInvalidate();
    }

    public int a()
    {
        return (int)f;
    }

    public void a(float f1, float f2, int i1, a a1)
    {
        l = a1;
        k = true;
        if (!g.isFinished())
        {
            g.abortAnimation();
            g.startScroll((int)(f * 1000F), 0, (int)(f2 * 1000F - f * 1000F), 0, i1);
        } else
        {
            g.startScroll((int)(f1 * 1000F), 0, (int)(f2 * 1000F - f1 * 1000F), 0, i1);
        }
        if (l == null);
        invalidate();
    }

    public void b()
    {
        a(0.0F, 0.0F, 0, null);
        invalidate();
    }

    public void computeScroll()
    {
        if (g.computeScrollOffset())
        {
            setProgress((float)g.getCurrX() / 1000F);
        } else
        if (k)
        {
            k = false;
            if (l != null)
            {
                l.a();
            }
            postInvalidate();
            return;
        }
    }

    public float getProgress()
    {
        return f;
    }

    protected void onDraw(Canvas canvas)
    {
        super.onDraw(canvas);
        if (b > 0)
        {
            if (a == null)
            {
                a = new RectF((b - c) + h, (b - c) + h, (b + c) - h, (b + c) - h);
            }
            if (f != 0.0F)
            {
                canvas.drawArc(a, 0.0F, 360F, false, e);
            }
            canvas.drawArc(a, -90F, f / 1.0F, false, d);
            if (f != 0.0F)
            {
                canvas.rotate(f / 1.0F, b, b);
                return;
            }
        }
    }

    protected void onMeasure(int i1, int j1)
    {
        super.onMeasure(i1, j1);
        if (getWidth() > 0)
        {
            b = getWidth() / 2;
            c = b - r.a(getContext(), 2.0F);
        }
    }

    public void setColor(int i1)
    {
        j = i1;
        d.setColor(j);
        invalidate();
    }
}
