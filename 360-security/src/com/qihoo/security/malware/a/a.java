// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.qihoo.security.malware.a;

import android.content.Context;
import android.os.Handler;
import android.os.Message;
import com.qihoo.security.malware.vo.MaliciousInfo;
import java.lang.ref.WeakReference;
import java.util.List;

public abstract class com.qihoo.security.malware.a.a
{
    public static interface a
    {

        public abstract void a();

        public abstract void a(MaliciousInfo maliciousinfo, int i, int j);

        public abstract void b();
    }

    protected static final class b extends Handler
    {

        private final WeakReference a;

        public void handleMessage(Message message)
        {
            if (a != null && a.get() != null && message != null)
            {
                ((com.qihoo.security.malware.a.a)a.get()).a(message);
            }
        }

        public b(com.qihoo.security.malware.a.a a1)
        {
            a = new WeakReference(a1);
        }
    }


    protected Context a;
    protected a b;
    protected b c;

    public com.qihoo.security.malware.a.a(Context context, a a1)
    {
        a = context;
        b = a1;
        c = new b(this);
    }

    public void a()
    {
        c.removeCallbacksAndMessages(null);
    }

    protected void a(Message message)
    {
        message.what;
        JVM INSTR tableswitch 1 3: default 32
    //                   1 33
    //                   2 65
    //                   3 82;
           goto _L1 _L2 _L3 _L4
_L1:
        return;
_L2:
        if (b != null)
        {
            b.a((MaliciousInfo)message.obj, message.arg1, message.arg2);
            return;
        }
        continue; /* Loop/switch isn't completed */
_L3:
        if (b != null)
        {
            b.a();
            return;
        }
        continue; /* Loop/switch isn't completed */
_L4:
        if (b != null)
        {
            b.b();
            return;
        }
        if (true) goto _L1; else goto _L5
_L5:
    }

    protected abstract void a(List list);
}
