// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.qihoo.security.malware.vo;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import com.qihoo.security.leak.c;
import com.qihoo.security.locale.d;
import com.qihoo.security.malware.b;
import com.qihoo360.common.utils.HashUtil;
import com.qihoo360.mobilesafe.b.a;
import com.qihoo360.mobilesafe.b.o;
import com.qihoo360.mobilesafe.b.s;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class MaliciousInfo
    implements Parcelable
{
    public static final class GroupType extends Enum
    {

        public static final GroupType GROUP_TYPE_ADVERT;
        public static final GroupType GROUP_TYPE_DEFAULT;
        public static final GroupType GROUP_TYPE_FLAW;
        public static final GroupType GROUP_TYPE_MALWARE;
        public static final GroupType GROUP_TYPE_PROTECTION;
        public static final GroupType GROUP_TYPE_WARNING;
        private static final GroupType a[];

        public static GroupType valueOf(String s1)
        {
            return (GroupType)Enum.valueOf(com/qihoo/security/malware/vo/MaliciousInfo$GroupType, s1);
        }

        public static GroupType[] values()
        {
            return (GroupType[])a.clone();
        }

        static 
        {
            GROUP_TYPE_DEFAULT = new GroupType("GROUP_TYPE_DEFAULT", 0);
            GROUP_TYPE_MALWARE = new GroupType("GROUP_TYPE_MALWARE", 1);
            GROUP_TYPE_FLAW = new GroupType("GROUP_TYPE_FLAW", 2);
            GROUP_TYPE_PROTECTION = new GroupType("GROUP_TYPE_PROTECTION", 3);
            GROUP_TYPE_ADVERT = new GroupType("GROUP_TYPE_ADVERT", 4);
            GROUP_TYPE_WARNING = new GroupType("GROUP_TYPE_WARNING", 5);
            a = (new GroupType[] {
                GROUP_TYPE_DEFAULT, GROUP_TYPE_MALWARE, GROUP_TYPE_FLAW, GROUP_TYPE_PROTECTION, GROUP_TYPE_ADVERT, GROUP_TYPE_WARNING
            });
        }

        private GroupType(String s1, int i)
        {
            super(s1, i);
        }
    }


    public static final int APP_SOURCE_GOOGLE_MARKET = 1;
    public static final int APP_SOURCE_NONE = -1;
    public static final int APP_SOURCE_UNKNOW = 0;
    public static final android.os.Parcelable.Creator CREATOR = new android.os.Parcelable.Creator() {

        public MaliciousInfo a(Parcel parcel)
        {
            return new MaliciousInfo(parcel);
        }

        public MaliciousInfo[] a(int i)
        {
            return new MaliciousInfo[i];
        }

        public Object createFromParcel(Parcel parcel)
        {
            return a(parcel);
        }

        public Object[] newArray(int i)
        {
            return a(i);
        }

    };
    public static final int LABEL_MAX_LENGTH = 64;
    public int _id;
    private String a;
    public int appSource;
    public int behavior;
    public int checkStatus;
    public List childData;
    public int childLevel;
    public String filePath;
    public int fileType;
    public long foundDate;
    public GroupType groupType;
    public int isExpand;
    public boolean isInMonitorList;
    public boolean isInstalled;
    public boolean isMonitor;
    public boolean isSystem;
    public c leakItem;
    public int level;
    public int lineType;
    public int maliceRank;
    public String packageName;
    public int riskClass;
    public int shadeType;
    public int state;
    public String trojanName;

    public MaliciousInfo()
    {
        groupType = GroupType.GROUP_TYPE_DEFAULT;
        level = 0;
        childLevel = 0;
        checkStatus = 1;
        isExpand = 0;
        lineType = 0;
        shadeType = 0;
        childData = new ArrayList();
    }

    private MaliciousInfo(Parcel parcel)
    {
        groupType = GroupType.GROUP_TYPE_DEFAULT;
        level = 0;
        childLevel = 0;
        checkStatus = 1;
        isExpand = 0;
        lineType = 0;
        shadeType = 0;
        childData = new ArrayList();
        a(parcel);
    }


    private int a(String s1)
    {
        return a(com.qihoo.security.locale.d.a().b(0x7f0e0007), s1);
    }

    private int a(String as[], String s1)
    {
        if (!TextUtils.isEmpty(s1) && as != null && as.length > 0)
        {
            for (int i = 0; i < as.length; i++)
            {
                if (s1.equals(as[i]))
                {
                    return i;
                }
            }

        }
        return -1;
    }

    private String a()
    {
        return getVirusSummaryOfDialog();
    }

    private void a(Parcel parcel)
    {
        _id = parcel.readInt();
        packageName = parcel.readString();
        riskClass = parcel.readInt();
        behavior = parcel.readInt();
        maliceRank = parcel.readInt();
        isSystem = parcel.createBooleanArray()[0];
        isInstalled = parcel.createBooleanArray()[0];
        filePath = parcel.readString();
        isMonitor = parcel.createBooleanArray()[0];
        foundDate = parcel.readLong();
        appSource = parcel.readInt();
        a = parcel.readString();
        trojanName = parcel.readString();
        isInMonitorList = parcel.createBooleanArray()[0];
    }

    private int b(String s1)
    {
        return a(com.qihoo.security.locale.d.a().b(0x7f0e0009), s1);
    }

    private String b()
    {
        return com.qihoo.security.locale.d.a().a(0x7f0c013c);
    }

    private int c(String s1)
    {
        int j = -1;
        byte byte0 = j;
        if (!TextUtils.isEmpty(s1))
        {
            String as[] = com.qihoo.security.locale.d.a().b(0x7f0e000c);
            byte0 = j;
            if (as != null)
            {
                byte0 = j;
                if (as.length > 0)
                {
                    int i = 0;
                    do
                    {
                        byte0 = j;
                        if (i >= as.length)
                        {
                            break;
                        }
                        if (as[i].equals(s1))
                        {
                            j = i;
                        }
                        i++;
                    } while (true);
                }
            }
        }
        return byte0;
    }

    private String c()
    {
        String s2 = d();
        String s1 = s2;
        if (!TextUtils.isEmpty(trojanName))
        {
            s1 = s2;
            if (trojanName.matches(".+\\..*\\..+\\..+\\..+"))
            {
                String as[] = trojanName.split("\\.");
                String s3 = as[0];
                s1 = s2;
                if (!TextUtils.isEmpty(s3))
                {
                    if ("Trojan".equals(s3))
                    {
                        int i = b(as[1]);
                        s1 = s2;
                        if (i >= 0)
                        {
                            String as1[] = com.qihoo.security.locale.d.a().b(0x7f0e0004);
                            s1 = s2;
                            if (as1 != null)
                            {
                                s1 = s2;
                                if (as1.length > i)
                                {
                                    s1 = s2;
                                    if (!TextUtils.isEmpty(as1[i]))
                                    {
                                        s1 = as1[i];
                                    }
                                }
                            }
                        }
                    } else
                    {
                        int j = a(s3);
                        s1 = s2;
                        if (j >= 0)
                        {
                            String as2[] = com.qihoo.security.locale.d.a().b(0x7f0e0006);
                            s1 = s2;
                            if (as2 != null)
                            {
                                s1 = s2;
                                if (as2.length > j)
                                {
                                    s1 = s2;
                                    if (!TextUtils.isEmpty(as2[j]))
                                    {
                                        return as2[j];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return s1;
    }

    private String d()
    {
        return com.qihoo.security.locale.d.a().a(0x7f0c013d);
    }

    public int describeContents()
    {
        return 0;
    }

    public boolean equals(Object obj)
    {
        if (obj instanceof MaliciousInfo)
        {
            obj = (MaliciousInfo)obj;
            if (((MaliciousInfo) (obj)).isInstalled == isInstalled)
            {
                if (isInstalled)
                {
                    return TextUtils.equals(((MaliciousInfo) (obj)).packageName, packageName);
                } else
                {
                    return TextUtils.equals(((MaliciousInfo) (obj)).filePath, filePath);
                }
            }
        }
        return false;
    }

    public int getAppSource()
    {
        return appSource;
    }

    public long getDangerousPermissionList(Context context)
    {
        long l;
        long l2;
        l = 0L;
        l2 = l;
        if (TextUtils.isEmpty(packageName)) goto _L2; else goto _L1
_L1:
        long l1;
        context = context.getPackageManager();
        l1 = l;
        context = context.getPackageInfo(packageName, 4096).requestedPermissions;
        l2 = l;
        if (context == null) goto _L2; else goto _L3
_L3:
        l1 = l;
        l2 = l;
        if (context.length <= 0) goto _L2; else goto _L4
_L4:
        l1 = l;
        int j = context.length;
        int i = 0;
_L5:
        l2 = l;
        if (i >= j)
        {
            break; /* Loop/switch isn't completed */
        }
        l1 = l;
        int k = c(context[i]);
        l1 = l;
        if (k != -1)
        {
            l1 = l | 1L << k;
        }
        i++;
        l = l1;
        if (true) goto _L5; else goto _L2
        context;
        context.printStackTrace();
        l2 = l1;
_L2:
        return l2;
    }

    public String getDescription(Context context)
    {
        String s1 = null;
        if (isMalware())
        {
            s1 = a();
        } else
        if (isWarning())
        {
            return com.qihoo.security.malware.b.c(context, behavior);
        }
        return s1;
    }

    public String getDisplaySubTitle(Context context)
    {
        String s1 = null;
        if (isMalware())
        {
            s1 = c();
        } else
        if (isWarning())
        {
            return com.qihoo.security.malware.b.d(context, behavior);
        }
        return s1;
    }

    public String getLabel(Context context)
    {
        if (!TextUtils.isEmpty(a))
        {
            return a;
        }
        a = com.qihoo360.mobilesafe.b.a.a(context, packageName, filePath, isInstalled);
        if (a != null && a.length() > 64)
        {
            a = a.substring(0, 64);
        }
        return a;
    }

    public String getMfsha1HexString()
    {
        String s1 = null;
        if (!TextUtils.isEmpty(filePath))
        {
            s1 = s.a(HashUtil.getFileHash("SHA1", new File(filePath)));
        }
        return s1;
    }

    public String getSignHash(Context context)
    {
        Object obj = null;
        String s1 = obj;
        if (TextUtils.isEmpty(packageName))
        {
            break MISSING_BLOCK_LABEL_66;
        }
        try
        {
            context = context.getPackageManager().getPackageInfo(packageName, 64);
        }
        // Misplaced declaration of an exception variable
        catch (Context context)
        {
            context.printStackTrace();
            return null;
        }
        s1 = obj;
        if (context == null)
        {
            break MISSING_BLOCK_LABEL_66;
        }
        s1 = obj;
        if (((PackageInfo) (context)).signatures == null)
        {
            break MISSING_BLOCK_LABEL_66;
        }
        s1 = obj;
        if (((PackageInfo) (context)).signatures.length > 0)
        {
            s1 = s.c(((PackageInfo) (context)).signatures[0].toByteArray());
        }
        return s1;
    }

    public String getTripleArray(Context context)
    {
        return (new StringBuilder()).append(packageName).append("|").append(getVersionCode(context)).append("|").append(getSignHash(context)).toString();
    }

    public int getVersionCode(Context context)
    {
        byte byte0 = -1;
        int i = byte0;
        if (TextUtils.isEmpty(packageName))
        {
            break MISSING_BLOCK_LABEL_39;
        }
        try
        {
            context = context.getPackageManager().getPackageInfo(packageName, 64);
        }
        // Misplaced declaration of an exception variable
        catch (Context context)
        {
            context.printStackTrace();
            return -1;
        }
        i = byte0;
        if (context == null)
        {
            break MISSING_BLOCK_LABEL_39;
        }
        i = ((PackageInfo) (context)).versionCode;
        return i;
    }

    public String getVirusSummaryOfDialog()
    {
        String s2 = b();
        String s1 = s2;
        if (!TextUtils.isEmpty(trojanName))
        {
            s1 = s2;
            if (trojanName.matches(".+\\..*\\..+\\..+\\..+"))
            {
                String as[] = trojanName.split("\\.");
                String s3 = as[0];
                s1 = s2;
                if (!TextUtils.isEmpty(s3))
                {
                    if ("Trojan".equals(s3))
                    {
                        int i = b(as[1]);
                        s1 = s2;
                        if (i >= 0)
                        {
                            String as1[] = com.qihoo.security.locale.d.a().b(0x7f0e0003);
                            s1 = s2;
                            if (as1 != null)
                            {
                                s1 = s2;
                                if (as1.length > i)
                                {
                                    s1 = s2;
                                    if (!TextUtils.isEmpty(as1[i]))
                                    {
                                        s1 = as1[i];
                                    }
                                }
                            }
                        }
                    } else
                    {
                        int j = a(s3);
                        s1 = s2;
                        if (j >= 0)
                        {
                            String as2[] = com.qihoo.security.locale.d.a().b(0x7f0e0005);
                            s1 = s2;
                            if (as2 != null)
                            {
                                s1 = s2;
                                if (as2.length > j)
                                {
                                    s1 = s2;
                                    if (!TextUtils.isEmpty(as2[j]))
                                    {
                                        return as2[j];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return s1;
    }

    public boolean isAdvert()
    {
        while (riskClass == 101 || isWarning() && !TextUtils.isEmpty(trojanName) && trojanName.startsWith("Adware")) 
        {
            return true;
        }
        return false;
    }

    public boolean isDanger()
    {
        return riskClass >= 600 && riskClass < 800;
    }

    public boolean isFileExist()
    {
        boolean flag = false;
        if (!TextUtils.isEmpty(filePath))
        {
            flag = (new File(filePath)).exists();
        }
        return flag;
    }

    public boolean isHarmful()
    {
        return riskClass > 1;
    }

    public boolean isMalware()
    {
        return riskClass >= 600;
    }

    public boolean isSafty()
    {
        return riskClass == 0;
    }

    public boolean isTrojan()
    {
        return riskClass >= 800;
    }

    public boolean isUninstall(Context context)
    {
        boolean flag;
        boolean flag1;
        flag = true;
        flag1 = false;
        if (!isInstalled) goto _L2; else goto _L1
_L1:
        if (TextUtils.isEmpty(filePath)) goto _L4; else goto _L3
_L3:
label0:
        {
            if (o.a(context, packageName))
            {
                flag = flag1;
                if (isFileExist())
                {
                    break label0;
                }
            }
            flag = true;
        }
_L6:
        return flag;
_L4:
        if (o.a(context, packageName))
        {
            return false;
        }
        continue; /* Loop/switch isn't completed */
_L2:
        if ((new File(filePath)).exists())
        {
            return false;
        }
        if (true) goto _L6; else goto _L5
_L5:
    }

    public boolean isWarning()
    {
        return riskClass > 1 && riskClass < 600;
    }

    public void setLabel(String s1)
    {
        String s2 = s1;
        if (s1 != null)
        {
            s2 = s1;
            if (s1.length() > 64)
            {
                s2 = s1.substring(0, 64);
            }
        }
        a = s2;
    }

    public void writeToParcel(Parcel parcel, int i)
    {
        parcel.writeInt(_id);
        parcel.writeString(packageName);
        parcel.writeInt(riskClass);
        parcel.writeInt(behavior);
        parcel.writeInt(maliceRank);
        parcel.writeBooleanArray(new boolean[] {
            isSystem
        });
        parcel.writeBooleanArray(new boolean[] {
            isInstalled
        });
        parcel.writeString(filePath);
        parcel.writeBooleanArray(new boolean[] {
            isMonitor
        });
        parcel.writeLong(foundDate);
        parcel.writeInt(appSource);
        parcel.writeString(a);
        parcel.writeString(trojanName);
        parcel.writeBooleanArray(new boolean[] {
            isInMonitorList
        });
    }

}
