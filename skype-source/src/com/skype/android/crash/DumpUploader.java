// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.skype.android.crash;

import com.skype.android.concurrent.AsyncService;
import com.skype.android.config.FileUtil;
import com.skype.android.util.Charsets;
import com.skype.android.util.HttpUtil;
import com.skype.android.util.NetworkUtil;
import com.skype.android.util.TimeUtil;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URLConnection;
import java.util.Date;
import java.util.UUID;
import java.util.logging.Logger;
import net.hockeyapp.android.Constants;

// Referenced classes of package com.skype.android.crash:
//            LoggingWriter

public class DumpUploader
{

    private static final Logger a = Logger.getLogger("DumpUploader");
    private AsyncService b;
    private HttpUtil c;
    private NetworkUtil d;
    private TimeUtil e;
    private OutputStream f;
    private PrintWriter g;
    private String h;

    public DumpUploader(AsyncService asyncservice, HttpUtil httputil, NetworkUtil networkutil, TimeUtil timeutil)
    {
        b = asyncservice;
        c = httputil;
        d = networkutil;
        e = timeutil;
    }

    private String a(File file, boolean flag)
    {
        Object obj;
        Object obj1;
        Object obj2;
        Object obj3;
        obj3 = null;
        obj2 = null;
        obj1 = obj2;
        obj = obj3;
        String s = (new StringBuilder()).append(UUID.randomUUID().toString()).append(".log").toString();
        obj1 = obj2;
        obj = obj3;
        obj2 = new OutputStreamWriter(new FileOutputStream(new File(file, s)), Charsets.a);
        file = ((File) (obj2));
        obj = obj2;
        obj2 = new BufferedWriter(((Writer) (obj2)));
        obj1 = obj2;
        obj = obj2;
        obj2 = new LoggingWriter(((Writer) (obj2)), a);
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write(String.format("Package: %s\n", new Object[] {
            Constants.APP_PACKAGE
        }));
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write(String.format("Version: %s\n", new Object[] {
            Constants.APP_VERSION
        }));
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write(String.format("Version name: %s\n", new Object[] {
            h
        }));
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write(String.format("Android: %s\n", new Object[] {
            Constants.ANDROID_VERSION
        }));
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write(String.format("Manufacturer: %s\n", new Object[] {
            Constants.PHONE_MANUFACTURER
        }));
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write(String.format("Model: %s\n", new Object[] {
            Constants.PHONE_MODEL
        }));
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write((new StringBuilder("Date: ")).append(new Date()).append("\n").toString());
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write("Description: breakpad dump\n");
        if (!flag)
        {
            break MISSING_BLOCK_LABEL_338;
        }
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write("upgrade: dump generated by a previous version\n");
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write("\n");
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).write("MinidumpContainer");
        file = ((File) (obj2));
        obj = obj2;
        ((Writer) (obj2)).flush();
        FileUtil.closeStream(((java.io.Closeable) (obj2)));
        return s;
        file;
_L4:
        obj = obj1;
        a.warning("Unable to generate log file/n");
        obj = obj1;
        file.printStackTrace();
        FileUtil.closeStream(((java.io.Closeable) (obj1)));
        return null;
        file;
_L2:
        FileUtil.closeStream(((java.io.Closeable) (obj)));
        throw file;
        obj1;
        obj = file;
        file = ((File) (obj1));
        if (true) goto _L2; else goto _L1
_L1:
        file;
        obj1 = obj;
        if (true) goto _L4; else goto _L3
_L3:
    }

    static void a(DumpUploader dumpuploader, String as[], String s, File file)
    {
        int j = as.length;
        int i = 0;
        while (i < j) 
        {
            File file1 = new File(file, as[i]);
            Object obj;
            boolean flag;
            if (file1.lastModified() < dumpuploader.e.c())
            {
                flag = true;
            } else
            {
                flag = false;
            }
            obj = dumpuploader.a(file, flag);
            if (obj == null)
            {
                continue;
            }
            obj = new File(file, ((String) (obj)));
            flag = dumpuploader.a(s, file1, ((File) (obj)));
            if (flag)
            {
                file1.delete();
                ((File) (obj)).delete();
            }
            if (!flag)
            {
                break;
            }
            i++;
        }
    }

    private void a(File file)
        throws IOException
    {
        Object obj = null;
        file = new FileInputStream(file);
        byte abyte0[];
        int i;
        abyte0 = new byte[4096];
        i = file.read(abyte0);
_L1:
        if (i == -1)
        {
            break MISSING_BLOCK_LABEL_51;
        }
        f.write(abyte0, 0, i);
        i = file.read(abyte0);
          goto _L1
        f.flush();
        file.close();
        return;
        Exception exception;
        exception;
        file = obj;
_L3:
        if (file != null)
        {
            file.close();
        }
        throw exception;
        exception;
        if (true) goto _L3; else goto _L2
_L2:
    }

    private void a(String s, File file, String s1)
        throws IOException
    {
        String s2 = file.getName();
        g.append((new StringBuilder("--")).append(s1).toString()).append("\r\n").append((new StringBuilder("Content-Disposition: form-data; name=\"")).append(s).append("\"; filename=\"").append(s2).append("\"").toString()).append("\r\n").append((new StringBuilder("Content-Type: ")).append(URLConnection.guessContentTypeFromName(s2)).toString()).append("\r\n").append("Content-Transfer-Encoding: binary").append("\r\n").append("\r\n").flush();
        a(file);
        g.append("\r\n");
        g.flush();
    }

    private boolean a(String s, File file, File file1)
    {
        String s1;
        String s2;
        String s3;
        s3 = (new StringBuilder("===")).append(System.currentTimeMillis()).append("===").toString();
        s2 = null;
        s1 = null;
        s = c.b((new StringBuilder("https://rink.hockeyapp.net/api/2/apps/")).append(s).append("/crashes/upload").toString());
        s1 = s;
        s2 = s;
        s.setUseCaches(false);
        s1 = s;
        s2 = s;
        s.setDoOutput(true);
        s1 = s;
        s2 = s;
        s.setDoInput(true);
        s1 = s;
        s2 = s;
        s.setRequestProperty("Content-Type", (new StringBuilder("multipart/form-data; boundary=")).append(s3).toString());
        s1 = s;
        s2 = s;
        f = s.getOutputStream();
        s1 = s;
        s2 = s;
        g = new PrintWriter(new OutputStreamWriter(f, Charsets.a), true);
        a("attachment0", file, s3);
        a("log", file1, s3);
        g.append("\r\n").append((new StringBuilder("--")).append(s3).append("--").toString()).append("\r\n");
        g.flush();
        s1 = s;
        s2 = s;
        g.close();
        s1 = s;
        s2 = s;
        int i = s.getResponseCode();
        s1 = s;
        s2 = s;
        a.info((new StringBuilder("Dump sent, response code=")).append(i).toString());
        if (s != null)
        {
            s.disconnect();
        }
        return true;
        file;
        s1 = s;
        s2 = s;
        g.close();
        s1 = s;
        s2 = s;
        try
        {
            throw file;
        }
        // Misplaced declaration of an exception variable
        catch (String s)
        {
            s2 = s1;
        }
        finally
        {
            if (s2 == null) goto _L0; else goto _L0
        }
        a.warning("Couldn't upload dump file");
        s2 = s1;
        s.printStackTrace();
        if (s1 != null)
        {
            s1.disconnect();
        }
        return false;
        s2.disconnect();
        throw s;
    }

    public final void a(String s)
    {
        h = s;
    }

    public final void a(String s, File file)
    {
        String as[];
        if (!file.exists())
        {
            as = new String[0];
        } else
        {
            as = file.list(new FilenameFilter() {

                final DumpUploader a;

                public final boolean accept(File file1, String s1)
                {
                    return s1.endsWith(".dmp");
                }

            
            {
                a = DumpUploader.this;
                super();
            }
            });
        }
        if (as.length > 0 && d.b())
        {
            b.a(new Runnable(as, s, file) {

                final String a[];
                final String b;
                final File c;
                final DumpUploader d;

                public final void run()
                {
                    DumpUploader.a(d, a, b, c);
                }

            
            {
                d = DumpUploader.this;
                a = as;
                b = s;
                c = file;
                super();
            }
            });
        }
    }

}
