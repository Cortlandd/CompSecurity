// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: braces fieldsfirst space lnc 

package com.urbanairship.push;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import com.urbanairship.CoreReceiver;
import com.urbanairship.Logger;
import com.urbanairship.UAirship;
import com.urbanairship.util.UAStringUtil;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import org.json.JSONObject;

// Referenced classes of package com.urbanairship.push:
//            PushManager, PushNotificationBuilder

class PushMessage
{

    private Bundle pushBundle;

    public PushMessage(Bundle bundle)
    {
        pushBundle = bundle;
    }

    int buildAndDisplayNotification()
    {
        boolean flag = false;
        int j = 0;
        PushNotificationBuilder pushnotificationbuilder = PushManager.shared().getNotificationBuilder();
        int i = j;
        if (pushnotificationbuilder == null)
        {
            break MISSING_BLOCK_LABEL_217;
        }
        i = ((flag) ? 1 : 0);
        Notification notification;
        Object obj;
        String s;
        try
        {
            obj = createExtrasMap();
        }
        catch (Exception exception)
        {
            Logger.error((new StringBuilder()).append("An exception occurred while creating or displaying the notification generated by ").append(pushnotificationbuilder.getClass().getName()).toString(), exception);
            Logger.error((new StringBuilder()).append("For push message: ").append(this).toString());
            return i;
        }
        i = ((flag) ? 1 : 0);
        s = getAlert();
        i = ((flag) ? 1 : 0);
        notification = pushnotificationbuilder.buildNotification(s, ((Map) (obj)));
        i = j;
        if (notification == null)
        {
            break MISSING_BLOCK_LABEL_217;
        }
        i = ((flag) ? 1 : 0);
        j = pushnotificationbuilder.getNextId(s, ((Map) (obj)));
        i = j;
        obj = new Intent((new StringBuilder()).append("com.urbanairship.push.NOTIFICATION_OPENED_PROXY.").append(UUID.randomUUID().toString()).toString());
        i = j;
        ((Intent) (obj)).setClass(UAirship.shared().getApplicationContext(), com/urbanairship/CoreReceiver);
        i = j;
        ((Intent) (obj)).putExtras(getPushBundle());
        i = j;
        if (notification.contentIntent == null)
        {
            break MISSING_BLOCK_LABEL_169;
        }
        i = j;
        ((Intent) (obj)).putExtra("com.urbanairship.push.CONTENT_INTENT", notification.contentIntent);
        i = j;
        notification.contentIntent = PendingIntent.getBroadcast(UAirship.shared().getApplicationContext(), 0, ((Intent) (obj)), 0);
        i = j;
        ((NotificationManager)UAirship.shared().getApplicationContext().getSystemService("notification")).notify(j, notification);
        i = j;
        return i;
    }

    Map createExtrasMap()
    {
        HashMap hashmap = new HashMap();
        String s;
        for (Iterator iterator = pushBundle.keySet().iterator(); iterator.hasNext(); hashmap.put(s, pushBundle.getString(s)))
        {
            s = (String)iterator.next();
        }

        return hashmap;
    }

    String getAlert()
    {
        return pushBundle.getString("com.urbanairship.push.ALERT");
    }

    String getCanonicalPushId()
    {
        return pushBundle.getString("com.urbanairship.push.CANONICAL_PUSH_ID");
    }

    String getPushApid()
    {
        return pushBundle.getString("com.urbanairship.push.APID");
    }

    Bundle getPushBundle()
    {
        return new Bundle(pushBundle);
    }

    String getRichPushMessageId()
    {
        return pushBundle.getString("_uamid");
    }

    String getSendId()
    {
        return pushBundle.getString("com.urbanairship.push.PUSH_ID");
    }

    boolean isExpired()
    {
        String s;
        s = pushBundle.getString("com.urbanairship.push.EXPIRATION");
        if (UAStringUtil.isEmpty(s))
        {
            break MISSING_BLOCK_LABEL_93;
        }
        Logger.debug((new StringBuilder()).append("Notification expiration time is \"").append(s).append("\"").toString());
        long l;
        long l1;
        l = Long.parseLong(s);
        l1 = System.currentTimeMillis();
        if (l * 1000L < l1)
        {
            return true;
        }
        break MISSING_BLOCK_LABEL_93;
        NumberFormatException numberformatexception;
        numberformatexception;
        Logger.debug((new StringBuilder()).append("Ignoring malformed expiration time: ").append(numberformatexception.getMessage()).toString());
        return false;
    }

    boolean isPing()
    {
        return pushBundle.get("com.urbanairship.push.PING") != null;
    }

    public String toString()
    {
        return (new JSONObject(createExtrasMap())).toString();
    }
}
